# -*- coding: utf-8 -*-
"""
Created on Fri Jul 19 10:26:26 2019

@author: xialumi
"""

from AH_Model import *
from H_Model import *


#Magnetic field generated by AH plus H

def Bz_HAH(x,y,z):
    return(Bz_H(x,y,z)+Bz_AH(x,y,z))
def By_HAH(x,y,z):
    return(By_H(x,y,z)+By_AH(x,y,z))
def Bx_HAH(x,y,z):
    return(Bx_H(x,y,z)+Bx_AH(x,y,z))


#Magnetic field generated by two paires of AH

def Bz_2(x,y,z):
    #Composante axiale (selon l'axe des anti-Helmholtz)
    return(Bz_AH(x,y,z)+Bz_AH(x,y,z))
def By_2(x,y,z):
    #Composante radiale (selon l'axe des Helmholtz)
    return(By_AH(x,y,z)+By_AH(x,y,z))    
def Bx_2(x,y,z):
    #Composante radiale (selon l'axe des Helmholtz)
    return(Bx_AH(x,y,z)+Bx_AH(x,y,z))

#show the plot of Bx_HAH
def afficher_Bx_HAH():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e2, e2, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Bx_HAH(p,0,0))
        Ly.append(Bx_HAH(0,p,0))
        Lz.append(Bx_HAH(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Bx")
    ax1.set_title("H+AH: Bx en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Bx")
    ax2.set_ylim(-0.04,0.04)
    ax2.set_title("H+AH: Bx en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Bx")
    ax2.set_ylim(-0.04,0.04)
    ax2.set_title("H+AH: Bx en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()


#show the plot of By_HAH
def afficher_By_HAH():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e2, e2, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(By_HAH(p,0,0))
        Ly.append(By_HAH(0,p,0))
        Lz.append(By_HAH(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("By")
    ax1.set_title("H+AH: By en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("By")
    ax2.set_title("H+AH: By en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("By")
    ax2.set_title("H+AH: By en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Bz_HAH():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-2*e1, 2*e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Bz_HAH(p,0,0))
        Ly.append(Bz_HAH(0,p,0))
        Lz.append(Bz_HAH(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Bz")
    ax1.set_title("H+AH: Bz en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Bz")
    ax2.set_title("H+AH: Bz en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Bz")
    ax2.set_title("H+AH: Bz en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Bx_2():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e1, e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Bx_2(p,0,0))
        Ly.append(Bx_2(0,p,0))
        Lz.append(Bx_2(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Bx")
    ax1.set_title("AH+AH: Bx en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Bx")
    ax2.set_title("AH+AH: Bx en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Bx")
    ax2.set_title("AH+AH: Bx en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_By_2():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e1, e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(By_2(p,0,0))
        Ly.append(By_2(0,p,0))
        Lz.append(By_2(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("By")
    ax1.set_title("AH+AH: By en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("By")
    ax2.set_title("AH+AH: By en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("By")
    ax2.set_title("AH+AH: By en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Bz_2():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e1, e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Bz_2(p,0,0))
        Ly.append(Bz_2(0,p,0))
        Lz.append(Bz_2(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Bz")
    ax1.set_title("AH+AH: Bz en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Bz")
    ax2.set_title("AH+AH: Bz en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Bz")
    ax2.set_title("AH+AH: Bz en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()




def Fx_HAH(x,y,z):
    return(Fx_AH(x,y,z)+Fx_H(x,y,z))
def Fy_HAH(x,y,z):
    return(Fy_AH(x,y,z)+Fy_H(x,y,z))
def Fz_HAH(x,y,z):
    return(Fz_AH(x,y,z)+Fz_H(x,y,z))


def afficher_Fx_HAH():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e2, e2, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Fx_HAH(p,0,0))
        Ly.append(Fx_HAH(0,p,0))
        Lz.append(Fx_HAH(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Fx")
    #ax1.set_ylim(-0.000015,0.00003)
    ax1.set_title("H+AH: Fx en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Fx")
    ax2.set_ylim(-4*10**(-15),4*10**(-15))
    ax2.set_title("H+AH: Fx en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Fx")
    ax2.set_ylim(-4*10**(-15),4*10**(-15))
    ax2.set_title("H+AH: Fx en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Fy_HAH():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e2, e2, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Fy_HAH(p,0,0))
        Ly.append(Fy_HAH(0,p,0))
        Lz.append(Fy_HAH(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Fy")
    #ax1.set_ylim(-0.000015,0.00003)
    ax1.set_title("H+AH: Fy en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Fy")
    #ax2.set_ylim(-0.000015,0.00003)
    ax2.set_title("H+AH: Fy en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Fy")
    ax2.set_ylim(-2*10**(-14),2*10**(-14))
    ax2.set_title("H+AH: Fy en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Fz_HAH():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-2*e1, 2*e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Fz_HAH(p,0,0))
        Ly.append(Fz_HAH(0,p,0))
        Lz.append(Fz_HAH(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    print(max(Lz))
    mp=Lz.index(max(Yz))
    print(P[mp])
    ax1.set_xlabel("x")
    ax1.set_ylabel("Fz")
    #ax1.set_ylim(-0.000015,0.00003)
    ax1.set_title("H+AH: Fz en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Fz")
    #ax2.set_ylim(-0.000015,0.00003)
    ax2.set_title("H+AH: Fz en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Fz")
    #ax2.set_ylim(-0.000015,0.00003)
    ax2.set_title("H+AH: Fz en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()



def Fx_2(x,y,z):
    return(Fx_AH(x,y,z)+Fx_AH(x,y,z))
def Fy_2(x,y,z):
    return(Fy_AH(x,y,z)+Fy_AH(x,y,z))
def Fz_2(x,y,z):
    return(Fz_AH(x,y,z)+Fz_AH(x,y,z))

    
def afficher_Fx_2():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e1, e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Fx_2(p,0,0))
        Ly.append(Fx_2(0,p,0))
        Lz.append(Fx_2(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Fx")
    ax1.set_title("AH+AH: Fx en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Fx")
    ax2.set_title("AH+AH: Fx en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Fx")
    ax2.set_title("AH+AH: Fx en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Fy_2():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e1, e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Fy_2(p,0,0))
        Ly.append(Fy_2(0,p,0))
        Lz.append(Fy_2(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Fy")
    ax1.set_title("AH+AH: Fy en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Fy")
    ax2.set_title("AH+AH: Fy en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Fy")
    ax2.set_title("AH+AH: Fy en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
def afficher_Fz_2():

    fig = plt.figure()
    ax1 = fig.add_axes([0.3, 0.1, 0.5, 0.8])
    P = np.linspace(-e1, e1, 120)
    Lx = []
    Ly = []
    Lz = []
    for p in P:
        Lx.append(Fz_2(p,0,0))
        Ly.append(Fz_2(0,p,0))
        Lz.append(Fz_2(0,0,p))
        Yx = np.array(Lx)
        Yy = np.array(Ly)
        Yz = np.array(Lz)
    ax1.set_xlabel("x")
    ax1.set_ylabel("Fz")
    ax1.set_title("AH+AH: Fz en fonction de x")
    ax1.plot(P, Yx)

    ax2 = fig.add_axes([1.0, 0.1, 0.6, 0.8])
    ax2.set_xlabel("y")
    ax2.set_ylabel("Fz")
    ax2.set_title("AH+AH: Fz en fonction de y")
    ax2.plot(P, Yy)

    ax2 = fig.add_axes([1.8, 0.1, 0.6, 0.8])
    ax2.set_xlabel("z")
    ax2.set_ylabel("Fz")
    ax2.set_title("AH+AH: Fz en fonction de z")
    ax2.plot(P, Yz)
    
    plt.show()
    
    
    
    
    